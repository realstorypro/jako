c
:q
app_names.map { |m| m }.map { |m| m }
app_names.map { |m| m }.map { |m| m*2 }
app_names.map { |m| m }.map { |m| m }
app_names.map { |m| m }
app_names
pp_names
pp_names = []
app_names
app_names[:test]
app_names
apps.each { |app| app_names << app["name"].to_sym }
app_names = []
apps.each { |app| app_names << app["name"].to_sym }
app_names
app_names[:test]
app_names < :test
app_names << :test
app_names = {}
apps.each { |app| app_names << app["name"].to_sym } 
app_names = []
app_names
apps.each { |app| app_names << app["name"].to_sym }  
app_names
apps.each { |app| app_names << app["name"].to_sym }   
apps.reject! {|app| app["name"].match? /aquarius/ }  
app_names.flatten
app_names.pop
app_names
choose('hi',[:'hi', :'bye bye'])
choose('hi',:'hi', :'bye bye')
choose('hi',:'hi', :bye)
choose('hi',:hi, :bye)
choose('hi',ii)
ii = [:asd, :asd]
choose('hi',ii)
app_names.count
ii.count
ii
ii = [:'asd', :'asd']
i = [:'asd', :'asd']
app_names
[:'asd', :'asd']
[:asd, :asd]
{ :asd, :asd }
{ :asd, :asd}
:asd, :asd
app_names
app_names[2].length
app_names[1].length
app_names[1]
app_names.count
app_names[1]
app_names[0]
app_names
apps









